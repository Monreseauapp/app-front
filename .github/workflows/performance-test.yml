name: Performance Testing

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  performance-android:
    name: üì± Android Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Flipper CLI
        run: yarn global add flipper-pkg

      - name: Generate performance bundle
        run: |
          yarn react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android-perf-bundle.js \
            --assets-dest android-perf-assets/ \
            --minify true

      - name: Analyze bundle performance
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const bundleContent = fs.readFileSync('android-perf-bundle.js', 'utf8');
            
            // Analyze bundle metrics
            const bundleSize = fs.statSync('android-perf-bundle.js').size;
            const linesCount = bundleContent.split('\n').length;
            
            // Simple regex checks for potential performance issues
            const largeImageImports = (bundleContent.match(/require.*\.(png|jpg|jpeg|gif)/g) || []).length;
            const consoleStatements = (bundleContent.match(/console\.(log|warn|error)/g) || []).length;
            
            const report = `## üìä Performance Analysis Report
            
            ### Bundle Metrics
            - **Size**: ${(bundleSize / 1024 / 1024).toFixed(2)} MB
            - **Lines**: ${linesCount.toLocaleString()}
            
            ### Potential Issues
            - **Large Image Imports**: ${largeImageImports}
            - **Console Statements**: ${consoleStatements}
            
            ### Recommendations
            ${bundleSize > 5 * 1024 * 1024 ? '‚ö†Ô∏è Bundle size > 5MB - Consider code splitting\n' : ''}
            ${largeImageImports > 10 ? '‚ö†Ô∏è Many image imports - Consider using remote images or image optimization\n' : ''}
            ${consoleStatements > 0 ? '‚ö†Ô∏è Console statements found - Remove before production\n' : ''}
            ${bundleSize <= 5 * 1024 * 1024 && largeImageImports <= 10 && consoleStatements === 0 ? '‚úÖ No performance issues detected' : ''}
            `;
            
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

  memory-leak-check:
    name: üß† Memory Leak Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run memory leak detection tests
        run: yarn test:memory-leaks || true

      - name: Generate memory report
        run: |
          echo "Memory leak detection completed" > memory-report.txt
          if [ -f "memory-leaks-report.json" ]; then
            cat memory-leaks-report.json >> memory-report.txt
          fi

      - name: Upload memory report
        uses: actions/upload-artifact@v4
        with:
          name: memory-leak-report
          path: memory-report.txt